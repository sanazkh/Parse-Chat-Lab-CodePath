'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // our libs


var _hashingFunctions = require('./hashingFunctions');

var _imageFiles = require('./imageFiles');

var _slotMachine = require('./slotMachine');

var _slotMachine2 = _interopRequireDefault(_slotMachine);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var colors = ['#81bef1', '#ad8bf2', '#bff288', '#de7878', '#a5aac5', '#6ff2c5', '#f0da5e', '#eb5972', '#f6be5d'];

var Potato = function () {
  function Potato() {
    _classCallCheck(this, Potato);

    this.colorMachine = new _slotMachine2.default(colors);
    this.eyesMachine = new _slotMachine2.default((0, _imageFiles.allPaths)('eyes'));
    this.noseMachine = new _slotMachine2.default((0, _imageFiles.allPaths)('nose'));
    this.mouthMachine = new _slotMachine2.default((0, _imageFiles.allPaths)('mouth'), _hashingFunctions.sumAndDiff);
  }

  // Construct Faces Parts


  _createClass(Potato, [{
    key: 'parts',
    value: function parts(string) {
      return {
        color: this.colorMachine.pull(string),
        eyes: this.eyesMachine.pull(string),
        nose: this.noseMachine.pull(string),
        mouth: this.mouthMachine.pull(string)
      };
    }
  }]);

  return Potato;
}();

exports.default = new Potato();