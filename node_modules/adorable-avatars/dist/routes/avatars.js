'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _imageFiles = require('../lib/imageFiles');

var _common = require('./common');

var _common2 = _interopRequireDefault(_common);

var _imager = require('../lib/imager');

var _potato = require('../lib/potato');

var _potato2 = _interopRequireDefault(_potato);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var partTypes = ['eyes', 'nose', 'mouth'];

// eslint-disable-next-line new-cap
var router = (0, _express2.default)();

router.param('id', function (req, res, next, id) {
  var faceParts;
  faceParts = _potato2.default.parts(id);
  req.faceParts = faceParts;
  return next();
});

router.get('/list', function (req, res) {
  var response = { face: {} };

  partTypes.forEach(function (type) {
    response.face[type] = (0, _imageFiles.allNames)(type);
  });

  return res.set('Content-Type', 'application/json').send(response);
});

router.get('/:size?/random', function (req, res) {
  var faceParts;
  faceParts = _potato2.default.parts(_uuid2.default.v4());
  req.faceParts = faceParts;

  return (0, _imager.combine)(faceParts, req.params.size, function (err, stdout) {
    return _common2.default.sendImage(err, stdout, req, res);
  });
});

router.get('/:size?/:id', function (req, res, next) {
  return (0, _imager.combine)(req.faceParts, req.params.size, function (err, stdout) {
    return _common2.default.sendImage(err, stdout, req, res, next);
  });
});

router.get('/face/:eyes/:nose/:mouth/:color/:size?', function (req, res, next) {
  var faceParts = { color: '#' + req.params.color };

  partTypes.forEach(function (type) {
    var possibleFileNames = (0, _imageFiles.allNames)(type);
    var requestedFileName = req.params[type];

    var fileName = void 0;
    if (possibleFileNames.includes(requestedFileName)) {
      fileName = requestedFileName;
    } else if (requestedFileName === 'x') {
      fileName = '';
    } else {
      fileName = possibleFileNames[0];
    }

    faceParts[type] = (0, _imageFiles.pathFor)(type, fileName);
  });

  return (0, _imager.combine)(faceParts, req.params.size, function (err, stdout) {
    return _common2.default.sendImage(err, stdout, req, res, next);
  });
});

exports.default = router;